$date
	Tue Dec 28 18:00:38 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module top_bin $end
$var wire 1 ! c_rst $end
$var wire 1 " clk $end
$var wire 32 # data_high [31:0] $end
$var wire 32 $ data_low [31:0] $end
$var wire 1 % rst $end
$var wire 1 & w_en $end
$var wire 49 ' wgt [48:0] $end
$var wire 49 ( img [48:0] $end
$var wire 7 ) be_out [6:0] $end
$scope begin pack_imgh[0] $end
$upscope $end
$scope begin pack_imgh[1] $end
$upscope $end
$scope begin pack_imgh[2] $end
$upscope $end
$scope begin pack_imgh[3] $end
$upscope $end
$scope begin pack_imgl[1] $end
$upscope $end
$scope begin pack_imgl[2] $end
$upscope $end
$scope begin pack_imgl[3] $end
$upscope $end
$scope begin pack_wgt[0] $end
$upscope $end
$scope begin pack_wgt[1] $end
$upscope $end
$scope begin pack_wgt[2] $end
$upscope $end
$scope begin pack_wgt[3] $end
$upscope $end
$scope begin pack_wgt[4] $end
$upscope $end
$scope begin pack_wgt[5] $end
$upscope $end
$scope begin pack_wgt[6] $end
$upscope $end
$scope module BE0 $end
$var wire 1 ! c_rst $end
$var wire 1 " clk $end
$var wire 49 * img [48:0] $end
$var wire 193 + lookup_popcnt [192:0] $end
$var wire 1 % rst $end
$var wire 49 , w [48:0] $end
$var wire 1 & w_en $end
$var wire 49 - x_out [48:0] $end
$var wire 7 . lut_in_origin [6:0] $end
$var wire 6 / lut_in [5:0] $end
$var wire 4 0 intern [3:0] $end
$var reg 3 1 count [2:0] $end
$var reg 5 2 popcnt [4:0] $end
$var reg 7 3 popcnt_add [6:0] $end
$scope module xnor0 $end
$var wire 7 4 img [6:0] $end
$var wire 7 5 w [6:0] $end
$var wire 7 6 x_out [6:0] $end
$var wire 7 7 img_cal [6:0] $end
$upscope $end
$scope module xnor1 $end
$var wire 7 8 img [6:0] $end
$var wire 7 9 w [6:0] $end
$var wire 7 : x_out [6:0] $end
$var wire 7 ; img_cal [6:0] $end
$upscope $end
$scope module xnor2 $end
$var wire 7 < img [6:0] $end
$var wire 7 = w [6:0] $end
$var wire 7 > x_out [6:0] $end
$var wire 7 ? img_cal [6:0] $end
$upscope $end
$scope module xnor3 $end
$var wire 7 @ img [6:0] $end
$var wire 7 A w [6:0] $end
$var wire 7 B x_out [6:0] $end
$var wire 7 C img_cal [6:0] $end
$upscope $end
$scope module xnor4 $end
$var wire 7 D img [6:0] $end
$var wire 7 E w [6:0] $end
$var wire 7 F x_out [6:0] $end
$var wire 7 G img_cal [6:0] $end
$upscope $end
$scope module xnor5 $end
$var wire 7 H img [6:0] $end
$var wire 7 I w [6:0] $end
$var wire 7 J x_out [6:0] $end
$var wire 7 K img_cal [6:0] $end
$upscope $end
$scope module xnor6 $end
$var wire 7 L img [6:0] $end
$var wire 7 M w [6:0] $end
$var wire 7 N x_out [6:0] $end
$var wire 7 O img_cal [6:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bz O
bx N
bz M
bz L
bz K
bx J
bz I
bz H
bz G
bx F
bz E
bz D
bz C
bx B
bz A
bz @
bz ?
bx >
bz =
bz <
bz ;
bx :
bz 9
bz 8
bz 7
bx 6
bz 5
bz 4
b0 3
bx 2
b0 1
bx 0
bx /
bx .
bx -
bz ,
b110101101100101100100011101100100011100011011010101100100011100011011010100011011010011010010001101100100011100011011010100011011010011010010001100011011010011010010001011010010001010001001000 +
bz *
b0 )
bz (
bz '
z&
1%
bz $
bz #
1"
z!
$end
#5000
0"
#10000
0%
1"
#15000
0"
#20000
1"
#25000
0"
#30000
b100 2
b100 0
b110011 /
b110011 .
b110011 6
b101000 :
b11011 >
b101111 B
b101010 F
b1101110 J
b11111110111001010100101111001101101010000110011 -
b11111 N
b1000001 7
b1011010 ;
b1101001 ?
b1011101 C
b1011000 G
b11100 K
b1101101 O
b1000001 4
b1011010 8
b1101001 <
b1011101 @
b1011000 D
b11100 H
b1101101 L
b1101 5
b1101 9
b1101 =
b1101 A
b1101 E
b1101 I
b1101 M
b1101101001110010110001011101110100110110101000001 (
b1101101001110010110001011101110100110110101000001 *
b1101000110100011010001101000110100011010001101 '
b1101000110100011010001101000110100011010001101 ,
b1011101110100110110101000001 #
b1011000001110011011010001101 $
1&
1!
1"
#35000
0"
#40000
b10 2
b10 0
b101000 /
b100 )
b100 3
b101000 .
b1 1
1"
#45000
0"
#50000
b100 2
b100 0
b11011 /
b110 )
b110 3
b11011 .
b10 1
1"
#55000
0"
#60000
b101 2
b101 0
b101111 /
b1010 )
b1010 3
b101111 .
b11 1
1"
#65000
0"
#70000
b11 2
b11 0
b101010 /
b1111 )
b1111 3
b101010 .
b100 1
1"
#75000
0"
#80000
b101 2
b101110 /
b101 0
b10010 )
b10010 3
b1101110 .
b101 1
1"
#85000
0"
#90000
b11111 /
b101 0
b10111 )
b10111 3
b11111 .
b110 1
1"
#95000
0"
#100000
b0xxxx 2
bx /
bx 0
b11100 )
b11100 3
bx .
b111 1
1"
#105000
0"
#110000
0&
0!
b100 2
b100 0
b110011 /
bx )
bx 3
b110011 .
b0 1
1"
#115000
0"
#120000
1"
#120001
