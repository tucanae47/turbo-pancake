$date
	Sun Dec 26 21:01:31 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module top_bin $end
$var wire 1 ! c_rst $end
$var wire 1 " clk $end
$var wire 32 # data_high [31:0] $end
$var wire 32 $ data_low [31:0] $end
$var wire 1 % rst $end
$var wire 1 & w_en $end
$var wire 49 ' wgt [48:0] $end
$var wire 49 ( img [48:0] $end
$var wire 7 ) be_out [6:0] $end
$scope begin pack_img_wgt[0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin pack_img_wgt[1] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin pack_img_wgt[2] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin pack_img_wgt[3] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin pack_img_wgt[4] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin pack_img_wgt[5] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin pack_img_wgt[6] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope module BE0 $end
$var wire 1 ! c_rst $end
$var wire 1 " clk $end
$var wire 49 * img [48:0] $end
$var wire 64 + lookup_popcnt [63:0] $end
$var wire 1 % rst $end
$var wire 49 , w [48:0] $end
$var wire 1 & w_en $end
$var wire 49 - x_out [48:0] $end
$var wire 7 . lut_in_origin [6:0] $end
$var wire 6 / lut_in [5:0] $end
$var wire 4 0 intern [3:0] $end
$var reg 3 1 count [2:0] $end
$var reg 5 2 popcnt [4:0] $end
$var reg 7 3 popcnt_add [6:0] $end
$scope module xnor0 $end
$var wire 7 4 img [6:0] $end
$var wire 7 5 w [6:0] $end
$var wire 7 6 x_out [6:0] $end
$var wire 7 7 img_cal [6:0] $end
$upscope $end
$scope module xnor1 $end
$var wire 7 8 img [6:0] $end
$var wire 7 9 w [6:0] $end
$var wire 7 : x_out [6:0] $end
$var wire 7 ; img_cal [6:0] $end
$upscope $end
$scope module xnor2 $end
$var wire 7 < img [6:0] $end
$var wire 7 = w [6:0] $end
$var wire 7 > x_out [6:0] $end
$var wire 7 ? img_cal [6:0] $end
$upscope $end
$scope module xnor3 $end
$var wire 7 @ img [6:0] $end
$var wire 7 A w [6:0] $end
$var wire 7 B x_out [6:0] $end
$var wire 7 C img_cal [6:0] $end
$upscope $end
$scope module xnor4 $end
$var wire 7 D img [6:0] $end
$var wire 7 E w [6:0] $end
$var wire 7 F x_out [6:0] $end
$var wire 7 G img_cal [6:0] $end
$upscope $end
$scope module xnor5 $end
$var wire 7 H img [6:0] $end
$var wire 7 I w [6:0] $end
$var wire 7 J x_out [6:0] $end
$var wire 7 K img_cal [6:0] $end
$upscope $end
$scope module xnor6 $end
$var wire 7 L img [6:0] $end
$var wire 7 M w [6:0] $end
$var wire 7 N x_out [6:0] $end
$var wire 7 O img_cal [6:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b101 O
b1100011 N
b11001 M
b101 L
b1111110 K
b11000 J
b11001 I
b1111110 H
b11001 G
b1111111 F
b11001 E
b11001 D
b1011100 C
b111010 B
b11001 A
b1011100 @
b10010 ?
b1110100 >
b11001 =
b10010 <
b1000010 ;
b100100 :
b11001 9
b1000010 8
b101010 7
b1001100 6
b11001 5
b101010 4
b0 3
b1 2
b0 1
b1 0
b1100 /
b1001100 .
b1100011001100011111110111010111010001001001001100 -
b11001001100100110010011001001100100110010011001 ,
b1010011010010001100011011010011010010001011010010001010001001000 +
b101111111000110011011100001001010000100101010 *
b0 )
b101111111000110011011100001001010000100101010 (
b11001001100100110010011001001100100110010011001 '
z&
1%
b100011000010111111100011001 $
b1011100001001010000100101010 #
1"
z!
$end
#5000
0"
#10000
0%
1"
#15000
0"
#20000
1"
#25000
0"
#30000
1&
1!
1"
#35000
0"
#40000
b0 2
b0 0
b100110 /
b1 )
b1 3
b100110 .
b1 1
1"
#45000
0"
#50000
b1 2
b1 0
b10011 /
b10011 .
b10 1
1"
#55000
0"
#60000
b0 2
b0 0
b1001 /
b10 )
b10 3
b1001001 .
b11 1
1"
#65000
0"
#70000
b100100 /
b100100 .
b100 1
1"
#75000
0"
#80000
b10010 /
b10010 .
b101 1
1"
#85000
0"
#90000
b1001 /
b1001001 .
b110 1
1"
#95000
0"
#100000
b100100 /
b100100 .
b111 1
1"
#105000
0"
#110000
0&
b1 2
b1 0
b1100 /
b1001100 .
b0 1
1"
#115000
0"
#120000
b0 2
b0 0
b100110 /
b11 )
b11 3
b100110 .
b1 1
1"
#125000
0"
#130000
b1 2
b1 0
b10011 /
b10011 .
b10 1
1"
#135000
0"
#140000
b0 2
b0 0
b1001 /
b100 )
b100 3
b1001001 .
b11 1
1"
#145000
0"
#150000
b100100 /
b100100 .
b100 1
1"
#155000
0"
#160000
b10010 /
b10010 .
b101 1
1"
#165000
0"
#170000
b1001 /
b1001001 .
b110 1
1"
#175000
0"
#180000
b100100 /
b100100 .
b111 1
1"
#185000
0"
#190000
b1 2
b1 0
b1100 /
b1001100 .
b0 1
1"
#195000
0"
#200000
b0 2
b0 0
b100110 /
b101 )
b101 3
b100110 .
b1 1
1"
#205000
0"
#210000
b1 2
b1 0
b10011 /
b10011 .
b10 1
1"
#215000
0"
#220000
b0 2
b0 0
b1001 /
b110 )
b110 3
b1001001 .
b11 1
1"
#225000
0"
#230000
b100100 /
b100100 .
b100 1
1"
#235000
0"
#240000
b10010 /
b10010 .
b101 1
1"
#245000
0"
#250000
b1001 /
b1001001 .
b110 1
1"
#250001
