$date
	Tue Dec 28 00:54:28 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module top_bin $end
$var wire 1 ! c_rst $end
$var wire 1 " clk $end
$var wire 32 # data_high [31:0] $end
$var wire 32 $ data_low [31:0] $end
$var wire 1 % rst $end
$var wire 1 & w_en $end
$var wire 49 ' wgt [48:0] $end
$var wire 49 ( img [48:0] $end
$var wire 7 ) be_out [6:0] $end
$scope begin pack_img_wgt[0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin pack_img_wgt[1] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin pack_img_wgt[2] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin pack_img_wgt[3] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin pack_img_wgt[4] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin pack_img_wgt[5] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin pack_img_wgt[6] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope module BE0 $end
$var wire 1 ! c_rst $end
$var wire 1 " clk $end
$var wire 49 * img [48:0] $end
$var wire 193 + lookup_popcnt [192:0] $end
$var wire 1 % rst $end
$var wire 49 , w [48:0] $end
$var wire 1 & w_en $end
$var wire 49 - x_out [48:0] $end
$var wire 7 . lut_in_origin [6:0] $end
$var wire 6 / lut_in [5:0] $end
$var wire 4 0 intern [3:0] $end
$var reg 3 1 count [2:0] $end
$var reg 5 2 popcnt [4:0] $end
$var reg 7 3 popcnt_add [6:0] $end
$scope module xnor0 $end
$var wire 7 4 img [6:0] $end
$var wire 7 5 w [6:0] $end
$var wire 7 6 x_out [6:0] $end
$var wire 7 7 img_cal [6:0] $end
$upscope $end
$scope module xnor1 $end
$var wire 7 8 img [6:0] $end
$var wire 7 9 w [6:0] $end
$var wire 7 : x_out [6:0] $end
$var wire 7 ; img_cal [6:0] $end
$upscope $end
$scope module xnor2 $end
$var wire 7 < img [6:0] $end
$var wire 7 = w [6:0] $end
$var wire 7 > x_out [6:0] $end
$var wire 7 ? img_cal [6:0] $end
$upscope $end
$scope module xnor3 $end
$var wire 7 @ img [6:0] $end
$var wire 7 A w [6:0] $end
$var wire 7 B x_out [6:0] $end
$var wire 7 C img_cal [6:0] $end
$upscope $end
$scope module xnor4 $end
$var wire 7 D img [6:0] $end
$var wire 7 E w [6:0] $end
$var wire 7 F x_out [6:0] $end
$var wire 7 G img_cal [6:0] $end
$upscope $end
$scope module xnor5 $end
$var wire 7 H img [6:0] $end
$var wire 7 I w [6:0] $end
$var wire 7 J x_out [6:0] $end
$var wire 7 K img_cal [6:0] $end
$upscope $end
$scope module xnor6 $end
$var wire 7 L img [6:0] $end
$var wire 7 M w [6:0] $end
$var wire 7 N x_out [6:0] $end
$var wire 7 O img_cal [6:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b110001 O
b1011001 N
b10111 M
b110001 L
b101010 K
b1000010 J
b10111 I
b101010 H
b10111 G
b1111111 F
b10111 E
b10111 D
b101111 C
b1000111 B
b10111 A
b101111 @
b1100011 ?
b1011 >
b10111 =
b1100011 <
b1111010 ;
b10010 :
b10111 9
b1111010 8
b1110000 7
b11000 6
b10111 5
b1110000 4
b0 3
b10 2
b0 1
b10 0
b11000 /
b11000 .
b1011001100001011111111000111000101100100100011000 -
b10111001011100101110010111001011100101110010111 ,
b110101101100101100100011101100100011100011011010101100100011100011011010100011011010011010010001101100100011100011011010100011011010011010010001100011011010011010010001011010010001010001001000 +
b110001010101000101110101111110001111110101110000 *
b0 )
b110001010101000101110101111110001111110101110000 (
b10111001011100101110010111001011100101110010111 '
z&
1%
b10100011000101010100010111 $
b101111110001111110101110000 #
1"
z!
$end
#5000
0"
#10000
0%
1"
#15000
0"
#20000
1"
#25000
0"
#30000
1&
1!
1"
#35000
0"
#40000
b10010 /
b10 )
b10 3
b10010 .
b1 1
1"
#45000
0"
#50000
b11 2
b11 0
b1011 /
b100 )
b100 3
b1011 .
b10 1
1"
#55000
0"
#60000
b100 2
b111 /
b100 0
b111 )
b111 3
b1000111 .
b11 1
1"
#65000
0"
#70000
b111 2
b111 0
b111111 /
b1011 )
b1011 3
b1111111 .
b100 1
1"
#75000
0"
#80000
b10 2
b10 0
b10 /
b10010 )
b10010 3
b1000010 .
b101 1
1"
#85000
0"
#90000
b100 2
b100 0
b11001 /
b10100 )
b10100 3
b1011001 .
b110 1
1"
#95000
0"
#100000
b0xxxx 2
bx /
bx 0
b11000 )
b11000 3
bx .
b111 1
1"
#105000
0"
#110000
0&
b10 2
b10 0
b11000 /
bx )
bx 3
b11000 .
b0 1
1"
#115000
0"
#120000
b10010 /
b10010 .
b1 1
1"
#120001
